using System;
using System.Collections.Generic;
using System.Globalization;

namespace WeirdCalendars {
    public class AigyptianCalendar : WeirdCalendar {

        public override string Author => "Greg Bear and Hellerick Ferlibay";
        public override Uri Reference => new Uri("https://calendars.fandom.com/wiki/Aigyptian_Calendar");

        protected override DateTime SyncDate => new DateTime(2020, 10, 13);
        protected override int SyncOffset => 356;

        public override CalendarRealization Realization => CalendarRealization.Fictional;

        // Uses strictly a day count, so year = month
        public override int GetMonthsInYear(int year, int era) {
            ValidateDateParams(year, era);
            return 1;
        }

        private const int CycleLength = 1507;
        // Zero-based leap years and duplicated day according to author's comment that
        // the day advances by 47 every four years. Since the interval is 1507 days, or
        // 4.129 years, the first leap year is Year 4.
        private static Dictionary<int, int> LeapYearDay = new Dictionary<int, int> {
            {4, 47},
            {8, 94},
            {12, 141},
            {16, 188},
            {20, 235},
            {24, 282},
            {28, 329},
            {33, 11},
            {37, 58},
            {41, 105},
            {45, 152},
            {49, 199},
            {53, 246},
            {57, 293},
            {61, 340},
            {66, 22},
            {70, 69},
            {74, 116},
            {78, 163},
            {82, 210},
            {86, 257},
            {90, 304},
            {94, 351},
            {99, 33},
            {103, 80},
            {107, 127},
            {111, 174},
            {115, 221},
            {119, 268},
            {123, 315},
            {127, 362},
            {132, 44},
            {136, 91},
            {140, 138},
            {144, 185},
            {148, 232},
            {152, 279},
            {156, 326},
            {161, 8},
            {165, 55},
            {169, 102},
            {173, 149},
            {177, 196},
            {181, 243},
            {185, 290},
            {189, 337},
            {194, 19},
            {198, 66},
            {202, 113},
            {206, 160},
            {210, 207},
            {214, 254},
            {218, 301},
            {222, 348},
            {227, 30},
            {231, 77},
            {235, 124},
            {239, 171},
            {243, 218},
            {247, 265},
            {251, 312},
            {255, 359},
            {260, 41},
            {264, 88},
            {268, 135},
            {272, 182},
            {276, 229},
            {280, 276},
            {284, 323},
            {289, 5},
            {293, 52},
            {297, 99},
            {301, 146},
            {305, 193},
            {309, 240},
            {313, 287},
            {317, 334},
            {322, 16},
            {326, 63},
            {330, 110},
            {334, 157},
            {338, 204},
            {342, 251},
            {346, 298},
            {350, 345},
            {355, 27},
            {359, 74},
            {363, 121},
            {367, 168},
            {371, 215},
            {375, 262},
            {379, 309},
            {383, 356},
            {388, 38},
            {392, 85},
            {396, 132},
            {400, 179},
            {404, 226},
            {408, 273},
            {412, 320},
            {417, 2},
            {421, 49},
            {425, 96},
            {429, 143},
            {433, 190},
            {437, 237},
            {441, 284},
            {445, 331},
            {450, 13},
            {454, 60},
            {458, 107},
            {462, 154},
            {466, 201},
            {470, 248},
            {474, 295},
            {478, 342},
            {483, 24},
            {487, 71},
            {491, 118},
            {495, 165},
            {499, 212},
            {503, 259},
            {507, 306},
            {511, 353},
            {516, 35},
            {520, 82},
            {524, 129},
            {528, 176},
            {532, 223},
            {536, 270},
            {540, 317},
            {544, 364},
            {549, 46},
            {553, 93},
            {557, 140},
            {561, 187},
            {565, 234},
            {569, 281},
            {573, 328},
            {578, 10},
            {582, 57},
            {586, 104},
            {590, 151},
            {594, 198},
            {598, 245},
            {602, 292},
            {606, 339},
            {611, 21},
            {615, 68},
            {619, 115},
            {623, 162},
            {627, 209},
            {631, 256},
            {635, 303},
            {639, 350},
            {644, 32},
            {648, 79},
            {652, 126},
            {656, 173},
            {660, 220},
            {664, 267},
            {668, 314},
            {672, 361},
            {677, 43},
            {681, 90},
            {685, 137},
            {689, 184},
            {693, 231},
            {697, 278},
            {701, 325},
            {706, 7},
            {710, 54},
            {714, 101},
            {718, 148},
            {722, 195},
            {726, 242},
            {730, 289},
            {734, 336},
            {739, 18},
            {743, 65},
            {747, 112},
            {751, 159},
            {755, 206},
            {759, 253},
            {763, 300},
            {767, 347},
            {772, 29},
            {776, 76},
            {780, 123},
            {784, 170},
            {788, 217},
            {792, 264},
            {796, 311},
            {800, 358},
            {805, 40},
            {809, 87},
            {813, 134},
            {817, 181},
            {821, 228},
            {825, 275},
            {829, 322},
            {834, 4},
            {838, 51},
            {842, 98},
            {846, 145},
            {850, 192},
            {854, 239},
            {858, 286},
            {862, 333},
            {867, 15},
            {871, 62},
            {875, 109},
            {879, 156},
            {883, 203},
            {887, 250},
            {891, 297},
            {895, 344},
            {900, 26},
            {904, 73},
            {908, 120},
            {912, 167},
            {916, 214},
            {920, 261},
            {924, 308},
            {928, 355},
            {933, 37},
            {937, 84},
            {941, 131},
            {945, 178},
            {949, 225},
            {953, 272},
            {957, 319},
            {962, 1},
            {966, 48},
            {970, 95},
            {974, 142},
            {978, 189},
            {982, 236},
            {986, 283},
            {990, 330},
            {995, 12},
            {999, 59},
            {1003, 106},
            {1007, 153},
            {1011, 200},
            {1015, 247},
            {1019, 294},
            {1023, 341},
            {1028, 23},
            {1032, 70},
            {1036, 117},
            {1040, 164},
            {1044, 211},
            {1048, 258},
            {1052, 305},
            {1056, 352},
            {1061, 34},
            {1065, 81},
            {1069, 128},
            {1073, 175},
            {1077, 222},
            {1081, 269},
            {1085, 316},
            {1089, 363},
            {1094, 45},
            {1098, 92},
            {1102, 139},
            {1106, 186},
            {1110, 233},
            {1114, 280},
            {1118, 327},
            {1123, 9},
            {1127, 56},
            {1131, 103},
            {1135, 150},
            {1139, 197},
            {1143, 244},
            {1147, 291},
            {1151, 338},
            {1156, 20},
            {1160, 67},
            {1164, 114},
            {1168, 161},
            {1172, 208},
            {1176, 255},
            {1180, 302},
            {1184, 349},
            {1189, 31},
            {1193, 78},
            {1197, 125},
            {1201, 172},
            {1205, 219},
            {1209, 266},
            {1213, 313},
            {1217, 360},
            {1222, 42},
            {1226, 89},
            {1230, 136},
            {1234, 183},
            {1238, 230},
            {1242, 277},
            {1246, 324},
            {1251, 6},
            {1255, 53},
            {1259, 100},
            {1263, 147},
            {1267, 194},
            {1271, 241},
            {1275, 288},
            {1279, 335},
            {1284, 17},
            {1288, 64},
            {1292, 111},
            {1296, 158},
            {1300, 205},
            {1304, 252},
            {1308, 299},
            {1312, 346},
            {1317, 28},
            {1321, 75},
            {1325, 122},
            {1329, 169},
            {1333, 216},
            {1337, 263},
            {1341, 310},
            {1345, 357},
            {1350, 39},
            {1354, 86},
            {1358, 133},
            {1362, 180},
            {1366, 227},
            {1370, 274},
            {1374, 321},
            {1379, 3},
            {1383, 50},
            {1387, 97},
            {1391, 144},
            {1395, 191},
            {1399, 238},
            {1403, 285},
            {1407, 332},
            {1412, 14},
            {1416, 61},
            {1420, 108},
            {1424, 155},
            {1428, 202},
            {1432, 249},
            {1436, 296},
            {1440, 343},
            {1445, 25},
            {1449, 72},
            {1453, 119},
            {1457, 166},
            {1461, 213},
            {1465, 260},
            {1469, 307},
            {1473, 354},
            {1478, 36},
            {1482, 83},
            {1486, 130},
            {1490, 177},
            {1494, 224},
            {1498, 271},
            {1502, 318},
            {1506, 365}
        };

        // Author's example table applies an unexplained offset of -20 to the lookup.
        // Year 2347 still disagrees.
        private int CycleYear(int year) {
            return ((year - 20) % CycleLength + CycleLength) % CycleLength;
        }

        public override bool IsLeapYear(int year, int era) {
            ValidateDateParams(year, era);
            return LeapYearDay.ContainsKey(CycleYear(year));
        }

        public override bool IsLeapDay(int year, int month, int day, int era) {
            ValidateDateParams(year, month, day, era);
            if (LeapYearDay.TryGetValue(CycleYear(year), out int d)) return d == day;
            return false;
        }

        public override int GetDaysInMonth(int year, int month, int era) {
            ValidateDateParams(year, month, era);
            return IsLeapYear(year) ? 366 : 365;
        }

        private (int day, bool isDuplicated) AdjustedDay(DateTime time) {
            var ymd = ToLocalDate(time);
            if (LeapYearDay.TryGetValue(CycleYear(ymd.Year), out int d) && ymd.Day > d) return (ymd.Day - 1, ymd.Day == d + 1);
            return (ymd.Day, false);
        }

        public override int GetDayOfYear(DateTime time) => AdjustedDay(time).day;

        public override int GetDayOfMonth(DateTime time) => AdjustedDay(time).day;

        internal override void CustomizeDTFI(DateTimeFormatInfo dtfi) {
            SetNames(dtfi, new string[] { "Alexandros", "", "", "", "", "", "", "", "", "", "", "", "" });
        }

        internal override FormatWC GetFormatWC(DateTimeFormatInfo dtfi, DateTime time, string format) {
            FormatWC fx = new FormatWC(format, dtfi);
            var d = AdjustedDay(time);
            fx.Format = $"'{d.day.ToOrdinal()}{(d.isDuplicated ? "-bis" : "")} day of {ToLocalDate(time).Year} of Alexandros'";
            return fx;
        }
    }
}

